/*
  THIS FILE IS UNDER PUPPET CONTROL

  This file must be valid JSON. But comments are allowed

  Please edit settings.json, not settings.json.template

  To still commit settings without credentials you can 
  store any credential settings in credentials.json
*/
{
  // Name your instance!
  "title": "<%= $etherpad::pad_title -%>",

  // favicon default name
  // alternatively, set up a fully specified Url to your own favicon
  "favicon": "favicon.ico",

  //IP and port which etherpad should bind at
  <%- if $etherpad::ip { -%>
  "ip": "<%= $etherpad::ip -%>",
  <%- } else { -%>
  "ip": null,
  <%- } -%>
  "port" : <%= $etherpad::port -%>,

  // Node native SSL support
  // make sure to have the minimum and correct file access permissions set
  // so that the Etherpad server can access them
  <%- if $etherpad::ssl == 'enable' { -%>
  "ssl" : {
          "key"  : "<%= $etherpad::ssl_key -%>",
          "cert" : "<%= $etherpad::ssl_cert -%>"
          },
  <%- } else { -%>
  // SSL module is not enabled by default
  <%-  } -%>

  //the default text of a pad
  "defaultPadText" : "<%= $etherpad::default_pad_text -%>",

  //Pad behavior
  "padOptions": {
    "noColors": <%= $etherpad::_hash_padoptions['nocolors'] -%>,
    "showControls": <%= $etherpad::_hash_padoptions['showcontrols'] -%>,
    "showChat": <%= $etherpad::_hash_padoptions['showchat'] -%>,
    "showLineNumbers": <%= $etherpad::_hash_padoptions['showlinenumbers'] -%>,
    "useMonospaceFont": <%= $etherpad::_hash_padoptions['usemonospacefont'] -%>,
    "userName": <%= $etherpad::_hash_padoptions['username'] -%>,
    "userColor": <%= $etherpad::_hash_padoptions['usercolor'] -%>,
    "rtl": <%= $etherpad::_hash_padoptions['rtl'] -%>,
    "alwaysShowChat": <%= $etherpad::_hash_padoptions['alwaysshowchat'] -%>,
    "chatAndUsers": <%= $etherpad::_hash_padoptions['chatandusers'] -%>,
    "lang": "<%= $etherpad::_hash_padoptions['lang'] -%>"
  },

  /* Should we suppress errors from being visible in the default Pad Text? */
  "suppressErrorsInPadText" : false,

  /* Users must have a session to access pads. This effectively allows only group pads to be accessed. */
  "requireSession" : <%= $etherpad::require_session -%>,

  /* Users may edit pads but not create new ones. Pad creation is only via the API. This applies both to group pads and regular pads. */
  "editOnly" : <%= $etherpad::edit_only -%>,

  /* Users, who have a valid session, automatically get granted access to password protected pads */
  "sessionNoPassword" : false,

  /* if true, all css & js will be minified before sending to the client. This will improve the loading performance massivly,
     but makes it impossible to debug the javascript/css */
  "minify" : <%= $etherpad::minify -%>,

  /* How long may clients use served javascript code (in seconds)? Without versioning this
     may cause problems during deployment. Set to 0 to disable caching */
  "maxAge" : <%= $etherpad::max_age -%>, // 60 * 60 * 6 = 6 hours

  /* This is the absolute path to the Abiword executable. Setting it to null, disables abiword.
     Abiword is needed to advanced import/export features of pads*/
  <%- if $etherpad::manage_abiword { -%>
  "abiword" : "<%= $etherpad::abiword_path -%>",
  <%- } else { -%>
  "abiword" : null,
  <%- } -%>
  /* This is the absolute path to the soffice executable. Setting it to null, disables LibreOffice exporting.
     LibreOffice can be used in lieu of Abiword to export pads */
  "soffice" : null,

  /* This is the path to the Tidy executable. Setting it to null, disables Tidy.
     Tidy is used to improve the quality of exported pads*/
  <%- if $etherpad::manage_tidy { -%>
  "tidyHtml" : "<%= $etherpad::tidy_path -%>",
  <%- } else { -%>
  "tidyHtml" : null,
  <%- } -%>

  /* Allow import of file types other than the supported types: txt, doc, docx, rtf, odt, html & htm */
  "allowUnknownFileEnds" : true,

  /* This setting is used if you require authentication of all users.
     Note: /admin always requires authentication. */
  "requireAuthentication" : <%= $etherpad::require_authentication -%>,

  /* Require authorization by a module, or a user with is_admin set, see below. */
  "requireAuthorization" : <%= $etherpad::require_authorization -%>,

  /*when you use NginX or another proxy/ load-balancer set this to true*/
  "trustProxy" : <%= $etherpad::trust_proxy -%>,

  /* Privacy: disable IP logging */
  "disableIPlogging" : false,

  <%- if $etherpad::button_link =~ Hash[String, String, 1] { -%>
    <%- $size = size($etherpad::button_link) -%>
  /* Optional configuration for button_link module. */
  "ep_button_link": {
      <%- $etherpad::button_link.reduce(1) |$memo, $value| { -%>
      <%- $i = $memo + 1 -%>
      "<%= $value[0] %>": "<%= $value[1] %>"<%--%>
      <%- if $memo != $size { -%>,<%- } %>
      <%- $i -%>
      <%- } -%>
  },
  <%- } -%>

  <%- if $etherpad::ldapauth =~ Hash[String, Variant[String,Boolean], 1] { -%>
  /* Optional configuration for ldapauth module. */
  "users": {
    "ldapauth": {
      <%- $etherpad::ldapauth.each |$option, $value| { -%>
      <%- if $value =~ Boolean { -%>
      "<%= $option %>": <%= $value %>,
      <%- } else { -%>
      "<%= $option %>": "<%= $value %>",
      <%- } -%>
      <%- } -%>
    }
  },
  /* Users for basic authentication. is_admin = true gives access to /admin.
     If you do not uncomment this, /admin will not be available! */
  <%- } elsif $etherpad::users { -%>
  "users": {
    <%- $etherpad::users.each |String $username, Hash $attrs| { -%>
    "<%= $username -%>": {
      "password": "<%= $attrs['password'] -%>",
      "is_admin": "<%= $attrs['is_admin'] -%>"
    },
    <%- } -%>
  },
  <%- } else { -%>
  /*
  "users": {
    "admin": {
      "password": "changeme1",
      "is_admin": true
    },
    "user": {
      "password": "changeme1",
      "is_admin": false
    }
  },
  */
  <%- } -%>

  // restrict socket.io transport methods
  "socketTransportProtocols" : ["xhr-polling", "jsonp-polling", "htmlfile"],

  // Allow Load Testing tools to hit the Etherpad Instance.  Warning this will disable security on the instance.
  "loadTest": false,

  // Disable indentation on new line when previous line ends with some special chars (':', '[', '(', '{')
  /*
  "indentationOnNewLine": false,
  */

  /* The toolbar buttons configuration.
  "toolbar": {
    "left": [
      ["bold", "italic", "underline", "strikethrough"],
      ["orderedlist", "unorderedlist", "indent", "outdent"],
      ["undo", "redo"],
      ["clearauthorship"]
    ],
    "right": [
      ["importexport", "timeslider", "savedrevision"],
      ["settings", "embed"],
      ["showusers"]
    ],
    "timeslider": [
      ["timeslider_export", "timeslider_returnToPad"]
    ]
  },
  */

  /* The log level we are using, can be: DEBUG, INFO, WARN, ERROR */
  "loglevel": "INFO",

  //Logging configuration. See log4js documentation for further information
  // https://github.com/nomiddlename/log4js-node
  // You can add as many appenders as you want here:
  "logconfig" :
    { "appenders": [
        { "type": "console"
        //, "category": "access"// only logs pad access
        }
        <%- if $etherpad::logconfig_file { -%>
      , { "type": "file"
        , "filename": "<%= $etherpad::logconfig_file_filename %>"
        , "maxLogSize": <%= $etherpad::logconfig_file_max_log_size %>
        , "backups": <%= $etherpad::logconfig_file_backups %> // how many log files there're gonna be at max
            <%- if $etherpad::logconfig_file_category { -%>
        , "category": "<%= $etherpad::logconfig_file_category %>" // only log a specific category
            <%- } else { -%>
        //, "category": "test" // only log a specific category
          <%- } -%>
        }
        <%- } else { -%>
    /*
      , { "type": "file"
        , "filename": "your-log-file-here.log"
        , "maxLogSize": 1024
        , "backups": 3 // how many log files there're gonna be at max
        //, "category": "test" // only log a specific category
        }*/
        <%- } -%>
    /*
      , { "type": "logLevelFilter"
        , "level": "warn" // filters out all log messages that have a lower level than "error"
        , "appender":
          {  Use whatever appender you want here  }
        }*/
    /*
      , { "type": "logLevelFilter"
        , "level": "error" // filters out all log messages that have a lower level than "error"
        , "appender":
          { "type": "smtp"
          , "subject": "An error occured in your EPL instance!"
          , "recipients": "bar@blurdybloop.com, baz@blurdybloop.com"
          , "sendInterval": 60*5 // in secs -- will buffer log messages; set to 0 to send a mail for every message
          , "transport": "SMTP", "SMTP": { // see https://github.com/andris9/Nodemailer#possible-transport-methods
              "host": "smtp.example.com", "port": 465,
              "secureConnection": true,
              "auth": {
                  "user": "foo@example.com",
                  "pass": "bar_foo"
              }
            }
          }
        }*/
      ]
    }
}
